// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Epilogger.Web.Controllers {
    public partial class AccountController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AccountController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AccountController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult UploadAvatar() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.UploadAvatar);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Validate() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Validate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult TwitterLogon() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.TwitterLogon);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AccountController Actions { get { return MVC.Account; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Account";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Account";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string UploadAvatar = "UploadAvatar";
            public readonly string Validate = "Validate";
            public readonly string Index = "Index";
            public readonly string GetProfileOptions = "GetProfileOptions";
            public readonly string GetTwitterConnect = "GetTwitterConnect";
            public readonly string GetFacebookConnect = "GetFacebookConnect";
            public readonly string TwitterAuth = "TwitterAuth";
            public readonly string FacebookAuth = "FacebookAuth";
            public readonly string Login = "Login";
            public readonly string CloseAndRefresh = "CloseAndRefresh";
            public readonly string ConnectTwitter = "ConnectTwitter";
            public readonly string TwitterLogon = "TwitterLogon";
            public readonly string Logout = "Logout";
            public readonly string ForgotPassword = "ForgotPassword";
            public readonly string ResetPassword = "ResetPassword";
            public readonly string UpdatePassword = "UpdatePassword";
            public readonly string ActivationSent = "ActivationSent";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants {
            public const string UploadAvatar = "UploadAvatar";
            public const string Validate = "Validate";
            public const string Index = "Index";
            public const string GetProfileOptions = "GetProfileOptions";
            public const string GetTwitterConnect = "GetTwitterConnect";
            public const string GetFacebookConnect = "GetFacebookConnect";
            public const string TwitterAuth = "TwitterAuth";
            public const string FacebookAuth = "FacebookAuth";
            public const string Login = "Login";
            public const string CloseAndRefresh = "CloseAndRefresh";
            public const string ConnectTwitter = "ConnectTwitter";
            public const string TwitterLogon = "TwitterLogon";
            public const string Logout = "Logout";
            public const string ForgotPassword = "ForgotPassword";
            public const string ResetPassword = "ResetPassword";
            public const string UpdatePassword = "UpdatePassword";
            public const string ActivationSent = "ActivationSent";
        }


        static readonly ActionParamsClass_UploadAvatar s_params_UploadAvatar = new ActionParamsClass_UploadAvatar();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UploadAvatar UploadAvatarParams { get { return s_params_UploadAvatar; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UploadAvatar {
            public readonly string qqfile = "qqfile";
        }
        static readonly ActionParamsClass_Validate s_params_Validate = new ActionParamsClass_Validate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Validate ValidateParams { get { return s_params_Validate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Validate {
            public readonly string validationCode = "validationCode";
        }
        static readonly ActionParamsClass_TwitterLogon s_params_TwitterLogon = new ActionParamsClass_TwitterLogon();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_TwitterLogon TwitterLogonParams { get { return s_params_TwitterLogon; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_TwitterLogon {
            public readonly string oauth_token = "oauth_token";
            public readonly string oauth_verifier = "oauth_verifier";
            public readonly string ReturnUrl = "ReturnUrl";
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _ConnectService = "~/Views/Account/_ConnectService.cshtml";
            public readonly string _DisconnectService = "~/Views/Account/_DisconnectService.cshtml";
            public readonly string _profileImageChoice = "~/Views/Account/_profileImageChoice.cshtml";
            public readonly string ActivationSent = "~/Views/Account/ActivationSent.cshtml";
            public readonly string CloseAndRefresh = "~/Views/Account/CloseAndRefresh.cshtml";
            public readonly string ConnectTwitter = "~/Views/Account/ConnectTwitter.cshtml";
            public readonly string FacebookAuth = "~/Views/Account/FacebookAuth.cshtml";
            public readonly string ForgotPassword = "~/Views/Account/ForgotPassword.cshtml";
            public readonly string index = "~/Views/Account/index.cshtml";
            public readonly string IndexOld = "~/Views/Account/IndexOld.cshtml";
            public readonly string Login = "~/Views/Account/Login.cshtml";
            public readonly string Menu = "~/Views/Account/Menu.cshtml";
            public readonly string ResetPassword = "~/Views/Account/ResetPassword.cshtml";
            public readonly string TwitterAuth = "~/Views/Account/TwitterAuth.cshtml";
            public readonly string UpdatePassword = "~/Views/Account/UpdatePassword.cshtml";
            public readonly string Validate = "~/Views/Account/Validate.cshtml";
            static readonly _Old s_Old = new _Old();
            public _Old Old { get { return s_Old; } }
            public partial class _Old{
                public readonly string AccountActivationNeeded = "~/Views/Account/Old/AccountActivationNeeded.cshtml";
                public readonly string Create = "~/Views/Account/Old/Create.cshtml";
                public readonly string LoginOld = "~/Views/Account/Old/LoginOld.cshtml";
                public readonly string TwitterAuthTest = "~/Views/Account/Old/TwitterAuthTest.cshtml";
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_AccountController: Epilogger.Web.Controllers.AccountController {
        public T4MVC_AccountController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult UploadAvatar(string qqfile) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.UploadAvatar);
            callInfo.RouteValueDictionary.Add("qqfile", qqfile);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Validate(string validationCode) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Validate);
            callInfo.RouteValueDictionary.Add("validationCode", validationCode);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Index(Epilogger.Web.Models.AccountModel model, System.Web.Mvc.FormCollection c) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            callInfo.RouteValueDictionary.Add("model", model);
            callInfo.RouteValueDictionary.Add("c", c);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult GetProfileOptions() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.GetProfileOptions);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult GetTwitterConnect() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.GetTwitterConnect);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult GetFacebookConnect() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.GetFacebookConnect);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult TwitterAuth() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.TwitterAuth);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult FacebookAuth() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.FacebookAuth);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Login() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Login);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Login(Epilogger.Web.Models.LoginModel model) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Login);
            callInfo.RouteValueDictionary.Add("model", model);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult CloseAndRefresh() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.CloseAndRefresh);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ConnectTwitter() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.ConnectTwitter);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult TwitterLogon(string oauth_token, string oauth_verifier, string ReturnUrl) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.TwitterLogon);
            callInfo.RouteValueDictionary.Add("oauth_token", oauth_token);
            callInfo.RouteValueDictionary.Add("oauth_verifier", oauth_verifier);
            callInfo.RouteValueDictionary.Add("ReturnUrl", ReturnUrl);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Logout() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Logout);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ForgotPassword() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.ForgotPassword);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ForgotPassword(Epilogger.Web.Models.ForgotPasswordViewModel model) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.ForgotPassword);
            callInfo.RouteValueDictionary.Add("model", model);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ResetPassword() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.ResetPassword);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ResetPassword(Epilogger.Web.Models.ResetPasswordViewModel model) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.ResetPassword);
            callInfo.RouteValueDictionary.Add("model", model);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult UpdatePassword() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.UpdatePassword);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult UpdatePassword(Epilogger.Web.Models.UpdatePasswordModel model) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.UpdatePassword);
            callInfo.RouteValueDictionary.Add("model", model);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ActivationSent() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.ActivationSent);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
