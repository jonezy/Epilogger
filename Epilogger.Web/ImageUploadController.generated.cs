// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Epilogger.Web.Controllers {
    public partial class ImageUploadController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ImageUploadController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ImageUploadController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult ChooseUploadSource() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.ChooseUploadSource);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult UploadFromComputer() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.UploadFromComputer);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult UploadFromFacebook() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.UploadFromFacebook);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult UploadFromFlickr() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.UploadFromFlickr);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ImageUploadController Actions { get { return MVC.ImageUpload; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "ImageUpload";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "ImageUpload";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string ChooseUploadSource = "ChooseUploadSource";
            public readonly string UploadFromComputer = "UploadFromComputer";
            public readonly string UploadFromFacebook = "UploadFromFacebook";
            public readonly string UploadFromFlickr = "UploadFromFlickr";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants {
            public const string ChooseUploadSource = "ChooseUploadSource";
            public const string UploadFromComputer = "UploadFromComputer";
            public const string UploadFromFacebook = "UploadFromFacebook";
            public const string UploadFromFlickr = "UploadFromFlickr";
        }


        static readonly ActionParamsClass_ChooseUploadSource s_params_ChooseUploadSource = new ActionParamsClass_ChooseUploadSource();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ChooseUploadSource ChooseUploadSourceParams { get { return s_params_ChooseUploadSource; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ChooseUploadSource {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_UploadFromComputer s_params_UploadFromComputer = new ActionParamsClass_UploadFromComputer();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UploadFromComputer UploadFromComputerParams { get { return s_params_UploadFromComputer; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UploadFromComputer {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_UploadFromFacebook s_params_UploadFromFacebook = new ActionParamsClass_UploadFromFacebook();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UploadFromFacebook UploadFromFacebookParams { get { return s_params_UploadFromFacebook; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UploadFromFacebook {
            public readonly string eventId = "eventId";
        }
        static readonly ActionParamsClass_UploadFromFlickr s_params_UploadFromFlickr = new ActionParamsClass_UploadFromFlickr();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UploadFromFlickr UploadFromFlickrParams { get { return s_params_UploadFromFlickr; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UploadFromFlickr {
            public readonly string eventId = "eventId";
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _Layout = "~/Views/ImageUpload/_Layout.cshtml";
            public readonly string ChooseUploadSource = "~/Views/ImageUpload/ChooseUploadSource.cshtml";
            public readonly string UploadFromComputer = "~/Views/ImageUpload/UploadFromComputer.cshtml";
            public readonly string UploadFromFacebook = "~/Views/ImageUpload/UploadFromFacebook.cshtml";
            public readonly string UploadFromFlickr = "~/Views/ImageUpload/UploadFromFlickr.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_ImageUploadController: Epilogger.Web.Controllers.ImageUploadController {
        public T4MVC_ImageUploadController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult ChooseUploadSource(string id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.ChooseUploadSource);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult UploadFromComputer(string id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.UploadFromComputer);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult UploadFromComputer(string id, System.Collections.Generic.IEnumerable<System.Web.HttpPostedFileBase> files) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.UploadFromComputer);
            callInfo.RouteValueDictionary.Add("id", id);
            callInfo.RouteValueDictionary.Add("files", files);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult UploadFromFacebook(string eventId) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.UploadFromFacebook);
            callInfo.RouteValueDictionary.Add("eventId", eventId);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult UploadFromFlickr(string eventId) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.UploadFromFlickr);
            callInfo.RouteValueDictionary.Add("eventId", eventId);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
