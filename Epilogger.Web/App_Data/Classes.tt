<#@ template language="C#v3.5" debug="False" hostspecific="True"  #>
<#@ output extension=".cs" #>
<#@ include file="SQLServer.ttinclude" #>
<#
    var tables = LoadTables();
#>
using System;
using System.ComponentModel;
using System.Linq;

namespace <#=Namespace#>
{
    
    
<#  foreach(Table tbl in tables){#>    
    
    /// <summary>
    /// A class which represents the <#=tbl.Name#> table in the <#=DatabaseName#> Database.
    /// This class is queryable through <#=DatabaseName#>DB.<#=tbl.ClassName#> 
    /// </summary>

	public partial class <#=tbl.ClassName#>: INotifyPropertyChanging, INotifyPropertyChanged
	{
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
	    
	    public <#=tbl.ClassName#>(){
	        OnCreated();
	    }
	    
	    #region Properties
	    
<#      foreach(var col in tbl.Columns){
			if (tbl.ClassName == col.CleanName)
			{
				col.CleanName += "X";
			}
#>
        partial void On<#=col.CleanName#>Changing(<#=col.SysType#><#=CheckNullable(col)#> value);
        partial void On<#=col.CleanName#>Changed();
		
		private <#=col.SysType#><#=CheckNullable(col)#> _<#=col.CleanName#>;
		public <#=col.SysType#><#=CheckNullable(col)#> <#=col.CleanName#> { 
		    get{
		        return _<#=col.CleanName#>;
		    } 
		    set{
		        this.On<#=col.CleanName#>Changing(value);
                this.SendPropertyChanging();
                this._<#=col.CleanName#> = value;
                this.SendPropertyChanged("<#=col.CleanName#>");
                this.On<#=col.CleanName#>Changed();
		    }
		}
		
<#      }#>

        #endregion

        #region Foreign Keys
<#
        List<string> fkCreated = new List<string>();
        foreach(FKTable fk in tbl.FKTables)
        { 
            
            if(!ExcludeTables.Contains(fk.OtherTable)){
                string propName=fk.OtherQueryable;
                if(fkCreated.Contains(propName))
                {
                    propName=fk.OtherQueryable+fkCreated.Count.ToString();
                }
                
                fkCreated.Add(fk.OtherQueryable);
                    
               
#>
        public IQueryable<<#=fk.OtherClass #>> <#=propName #>
        {
            get
            {
                  var db=new <#=Namespace #>.<#=DatabaseName#>DB();
                  return from items in db.<#=fk.OtherQueryable #>
                       where items.<#=fk.OtherColumn#> == _<#=fk.ThisColumn#>
                       select items;
            }
        }

<#
            }
        }
            
#>
        #endregion


        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        public event PropertyChangingEventHandler PropertyChanging;
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void SendPropertyChanging()
        {
            var handler = PropertyChanging;
            if (handler != null)
               handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

	}
	
<#}#>
}